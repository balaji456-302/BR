// C++ implementation of the Blue Robotics 'Ping' binary message protocol

//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
// THIS IS AN AUTOGENERATED FILE
// DO NOT EDIT
//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!

#pragma once

{% for definition in global %}
#include "ping-message-{{definition}}.h"
{% endfor %}

enum class PingDeviceType {
    UNKNOWN = 0,
    PING1D = 1,
    PING360 = 2,
};

/**
 * @brief Ping Helper class
 *  All functions should be validated in compile time or static
 *
 */
class PingHelper {
public:
    /**
     * @brief Return a human friendly device name
     *
     * @param deviceType
     * @return constexpr const char*
     */
    static constexpr const char* nameFromDeviceType(const PingDeviceType deviceType) {
        switch(deviceType) {
            case(PingDeviceType::UNKNOWN):
                return "UNKNOWN";
            case(PingDeviceType::PING1D):
                return "Ping1D";
            case(PingDeviceType::PING360):
                return "Ping360";
            default:
                return "Unregistered";
        }
    }

private:
    PingHelper() = default;
    ~PingHelper() = default;
};

enum class PingMessageId {
{% for definition in global %}
{% for messages in global[definition] %}
{% for message_type in global[definition][messages] %}
{% for message in global[definition][messages][message_type] %}
    {{definition|upper}}_{{message|upper}} = {{global[definition][messages][message_type][message].id}},
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}
};
